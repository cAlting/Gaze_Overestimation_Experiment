aes(x=looker,
y=b1,
group=participant,
color=participant))+
geom_point()+
geom_line()+
ylim(0,7)
ggplot(slopes,
aes(x=looker,
y=b1,
group=as.factor(participant),
color=as.factor(participant)))+
geom_point()+
geom_line()+
ylim(0,7)
ylim(0,7)
ggplot(slopes,
aes(x=looker,
y=b1,
group=as.factor(participant),
color=as.factor(participant)))+
geom_point()+
geom_line()+
geom_point(aes(x=looker, y=b0))+
geom_line(aes(x=looker, y=b0))+
ylim(0,7)
View(slopes)
ggplot(slopes,
aes(x=looker,
y=b1))+
geom_point()+
geom_line()
ggplot(slopes,
aes(x=looker,
y=b1,
group=as.factor(participant),
color=as.factor(participant)))+
geom_point()+
geom_line()+
geom_point(aes(x=looker, y=b0))+
geom_line(aes(x=looker, y=b0))
# b0 / Intercepts / CEs
ggplot(slopes,
aes(x=looker,
y=b0,
group=as.factor(participant),
color=as.factor(participant)))+
geom_point()+
geom_line()
View(df_complete)
## Rename levels of Gender var
# df_complete <- df_complete %>%
#   separate(looker_id,
#            c("Gender", "ID"),
#            sep = 1,
#            remove=FALSE)
write.csv(x = df_complete, file = "../../Data/Data Experiment 1 (Eye Morphology)/Eye_Measurements_Complete.csv")
## Write subset of complete df with only pixel values (and ratios) to disk
df_complete %>%
select(!contains("mm")) %>%
write.csv(x = ., file = "../../Data/Data Experiment 1 (Eye Morphology)/Eye_Measurements_px.csv")
## Write subset of complete df with only pixel values (and ratios) to disk
df_complete %>%
select(!contains("mm")) %>%
write.csv(x = ., file = "../../Data/Data Experiment 1 (Eye Morphology)/Eye_Measurements_px.csv")
library(tidyverse)
rm(ls())
ls()
typeof(ls())
rm()
# clean workspace
rm(list=ls())
library(ggplot2)
library(tidyverse)
library(tidyquant)
source("Scripts/99_import_csv.R")
exp_files_path <- "../../Data/Data Experiment 2 (PsychoPy)/"
df_exp2_raw <- import_csv(exp_files_path)
# select relevant variables
df_exp2 <- df_exp2_raw %>%
filter(!is.na(visAngCorr)) %>%
select(c("looker",
"visAngCorr",
"trials_exp.thisN",
"answer",
"RT",
"looker_gender",
"participant",
"subject_gender",
"subject_age")) %>%
mutate(
error = answer-visAngCorr
) %>%
rename(c(
"visAngCorr" = "deg")
)
# select relevant variables
df_exp2 <- df_exp2_raw %>%
filter(!is.na(visAngCorr)) %>%
select(c("looker",
"visAngCorr",
"trials_exp.thisN",
"answer",
"RT",
"looker_gender",
"participant",
"subject_gender",
"subject_age")) %>%
mutate(
error = answer-visAngCorr
) %>%
rename(c(
"deg" = "visAngCorr")
)
View(df_exp2)
# select relevant variables
df_exp2 <- df_exp2_raw %>%
filter(!is.na(visAngCorr)) %>%
select(c("looker",
"visAngCorr",
"trials_exp.thisN",
"answer",
"RT",
"looker_gender",
"participant",
"subject_gender",
"subject_age")) %>%
mutate(
error = answer-visAngCorr
) %>%
rename(c(
"deg" = "visAngCorr",
"trial" = "trials_exp.thisN",
"sID" = "participant",
"sAge" = "subject_age",
"sSex" = "subject_gender")
)
str(df_exp2)
# select relevant variables
df_exp2 <- df_exp2_raw %>%
filter(!is.na(visAngCorr)) %>%
select(c("looker",
"visAngCorr",
"trials_exp.thisN",
"answer",
"RT",
"looker_gender",
"participant",
"subject_gender",
"subject_age")) %>%
mutate(
error = answer-visAngCorr,
participant = as.factor(participant),
looker = as.factor(looker),
subject_gender = as.factor(subject_gender),
looker_gender = as.factor(looker_gender)
) %>%
rename(c(
"deg" = "visAngCorr",
"trial" = "trials_exp.thisN",
"sID" = "participant",
"sAge" = "subject_age",
"sSex" = "subject_gender")
)
str(df_exp2)
df_morph_mm <- read.csv("../../Data/Data Experiment 1 (Eye Morphology)/Eye_Measurements_avg_mm.csv")
View(df_morph_mm)
View(df_exp2)
df_merge <- merge(df_exp2, df_morph_mm, by.x = looker, by.y = looker_id)
df_merge <- merge(df_exp2, df_morph_mm, by.x = "looker", by.y = "looker_id")
View(df_merge)
# select relevant variables
df_exp2 <- df_exp2_raw %>%
filter(!is.na(visAngCorr)) %>%
select(c("looker",
"visAngCorr",
"trials_exp.thisN",
"answer",
"RT",
"participant",
"subject_gender",
"subject_age")) %>%
mutate(
error = answer-visAngCorr,
participant = as.factor(participant),
looker = as.factor(looker),
subject_gender = as.factor(subject_gender),
looker_gender = as.factor(looker_gender)
) %>%
rename(c(
"deg" = "visAngCorr",
"trial" = "trials_exp.thisN",
"sID" = "participant",
"sAge" = "subject_age",
"sSex" = "subject_gender")
)
# select relevant variables
df_exp2 <- df_exp2_raw %>%
filter(!is.na(visAngCorr)) %>%
select(c("looker",
"visAngCorr",
"trials_exp.thisN",
"answer",
"RT",
"participant",
"subject_gender",
"subject_age")) %>%
mutate(
error = answer-visAngCorr,
participant = as.factor(participant),
looker = as.factor(looker),
subject_gender = as.factor(subject_gender),
) %>%
rename(c(
"deg" = "visAngCorr",
"trial" = "trials_exp.thisN",
"sID" = "participant",
"sAge" = "subject_age",
"sSex" = "subject_gender")
)
df_merge <- merge(df_exp2, df_morph_mm, by.x = "looker", by.y = "looker_id")
View(df_merge)
View(df_morph_mm)
df_merge %>%
select(-c(X)) %>%
rename(c(
"lSex" = "looker_gender",
"lID" = "looker"
)) %>%
mutate(
lSex = as.factor(lSex),
lID = as.factor(lID)
)
df_clean <- df_merge %>%
select(-c(X)) %>%
rename(c(
"lSex" = "looker_gender",
"lID" = "looker"
)) %>%
mutate(
lSex = as.factor(lSex),
lID = as.factor(lID)
)
view(df_clean)
# aggregate judgements (1 value per participant per gaze direction)
df_summ_per_subject <- df_clean %>%
group_by(sID, deg) %>%
summarise(M_gd = mean(answer)
)
# aggregate judgements (1 value per Looker per gaze Direction)
df_summ_per_looker <- df_clean %>%
group_by(looker, deg) %>%
summarise(M_gd = mean(answer))
# aggregate judgements (1 value per Looker per gaze Direction)
df_summ_per_looker <- df_clean %>%
group_by(lID, deg) %>%
summarise(M_gd = mean(answer))
# aggregate judgements (1 value per Looker x Subject x GD combination)
df_summ <- df_clean %>%
group_by(lID, sID, deg) %>%
summarise(M_gd = mean(answer))
# aggregate judgements (over looker and observer)
df_summ_all <- df_clean %>%
group_by(deg) %>%
summarize(
M_gd = mean(answer)
)
df
# raw data with lm line
ggplot(df_clean,
aes(x = visAngCorr,
y = answer))+
geom_point()+
geom_smooth(method="lm")
# raw data with lm line
ggplot(df_clean,
aes(x = deg,
y = answer))+
geom_point()+
geom_smooth(method="lm")
# PGD ~ GD per subject
ggplot(df_summ_per_subject,
aes(x = deg,
y = M_gd,
group=sID,
color=sID))+
geom_point()+
geom_line()+
geom_function(fun = ~ .x, color="red", size=1)
# PDG ~ GD per Looker
ggplot(df_summ_per_looker,
aes(x = deg,
y = M_gd,
group = looker,
color = looker))+
geom_point()+
geom_line()+
geom_function(fun =~ .x, color="red")+
facet_wrap(~looker, nrow=4)
# PDG ~ GD per Looker
ggplot(df_summ_per_looker,
aes(x = deg,
y = M_gd,
group = lID,
color = lID))+
geom_point()+
geom_line()+
geom_function(fun =~ .x, color="red")+
facet_wrap(~lID, nrow=4)
# PDG ~ GD per Looker (one plot)
ggplot(df_summ_per_looker,
aes(x = deg,
y = M_gd,
group = lID,
color = lID))+
geom_point()+
geom_line()+
geom_function(fun =~ .x, color="red")
# PDG ~ GD per Looker and participant
ggplot(df_summ,
aes(x = deg,
y = M_gd,
group=interaction(lID, sID),
color=sID)) +
geom_point()+
geom_line()+
geom_function(fun=~.x, color="red")+
facet_wrap(~lID)
a <- df_clean %>%
group_by(trial, deg) %>%
summarize(
M_er = mean(error),
M_an = mean(answer),
n = n()
)
ggplot(a,
aes(x=trial,
y=M_an,
group=deg,
color=deg))+
geom_line()+
geom_ma(aes(y=M_an), size=5, ma_fun = SMA, n=50, color="blue")+
facet_wrap(~deg, scales="free")
slopes <- dplyr::group_by(df_clean, lID, sID) %>% summarize(b0 = coef(lm(answer ~ deg))[1],b1 = coef(lm(answer ~ deg))[2])
slopes
View(slopes)
df_lm <- merge(slopes, df_clean, by.x=lID, by.y = lID)
View(df_clean)
slopes
df_lm <- merge(slopes, df_clean, by.x=lID, by.y = lID)
df_lm <- merge(slopes, df_clean, by.x="lID", by.y = "lID")
View(df_lm)
df_lm <- merge(slopes, df_clean, by.x="lID", by.y = "lID") %>%
select(-sID.y) %>%
rename(c("sID" = "sID.x"))
df_lm
m1 <- lm(b1~ssr+whr+hei, data=df_lm)
m1 <- lm(b1~ssr+whr_mm+hei_mm, data=df_lm)
summary(m1)
m1 <- lm(b1~ss*whr_mm*hei_mm, data=df_lm)
summary(m1)
m1 <- lm(b1~ssr*whr_mm*hei_mm, data=df_lm)
summary(m1)
plot(m1)
car::vif(m1)
df_lm <- merge(slopes, df_clean, by.x="lID", by.y = "lID") %>%
select(-sID.y) %>%
rename(c("sID" = "sID.x")) %>%
mutate(
whr.z = scale(whr_mm),
ssr.z = scale(ssr),
hei.z = scale(hei_mm)
)
m1.z <- lm(b1~ssr.z*whr.z*hei.z, data = df_lm)
summary(m1.z)
plot(m1.z)
car::vif(m1.z)
pred <- df_lm %>%
select(whr.z, ssr.z, hei.z) %>%
cor()
rm(pred)
df_lm %>%
select(whr.z, ssr.z, hei.z) %>%
cor()
df_lm %>%
select(whr.z, ssr.z, hei.z, ssi_mm) %>%
cor()
df_lm <- merge(slopes, df_clean, by.x="lID", by.y = "lID") %>%
select(-sID.y) %>%
rename(c("sID" = "sID.x")) %>%
mutate(
whr.z = scale(whr_mm),
ssr.z = scale(ssr),
hei.z = scale(hei_mm),
ssi.z = scale(ssi_mm)
)
m1.z <- lm(b1~ssi.z*whr.z*hei.z, data = df_lm)
car::vif(m1.z)
m1.z <- lm(b1~ssr.z*whr.z*hei.z, data = df_lm)
car::vif(m1.z)
m1.z <- lm(b1~ssr.z*hei.z, data = df_lm)
car::vif(m1.z)
car::vif(m1.z)
m1.z <- lm(b1~ssr.z*hei.z, data = df_lm)
summary(m1.z)
plot(m1.z)
install.packages("sandwich")
install.packages("lmtest")
library(lmtest)
library(sandwich)
library(gramEvol)
variance = lm(abs(model$residuals) ~ model$fitted.values)$fitted.values^2
m1 <- lm(b1~ssr*hei_mm, data=df_lm)
summary(m1)
summary(m1.z)
plot(m1)
car::vif(m1)
car::vif(m1.z)
variance = lm(abs(m1.z$residuals) ~ m1.z$fitted.values)$fitted.values^2
# calculating the weights
weights = 1 / variance
# weighted regression model
weighted_model = lm(b1 ~ ssr.z*hei.z, weights = weights, data=df_lm)
summary(weighted_model)
summary(m1.z)
df_lm %>%
select(whr.z, ssr.z, hei.z, ssi.z) %>%
cor()
# Hypothesen überprüfen (Einfluss bestimmter Parameter auf OE/UE)
df_lm <- merge(slopes, df_clean, by.x="lID", by.y = "lID") %>%
select(-sID.y) %>%
rename(c("sID" = "sID.x")) %>%
mutate(
whr.z = scale(whr_mm),
ssr.z = scale(ssr),
hei.z = scale(hei_mm),
ssi.z = scale(ssi_mm),
b1.z = scale(b1)
)
m1.z <- lm(b1.z~ssr.z*hei.z, data = df_lm)
summary(m1.z)
plot(m1.z)
car::vif(m1.z)
m1.z <- lm(b1.z~ssr.z+hei.z+whr.z, data = df_lm)
summary(m1.z)
car::vif(m1.z)
m1.z <- lm(b1.z~ssr.z*hei.z, data = df_lm)
car::vif(m1.z)
summary(m1.z)
m1.z <- lm(b1~ssr.z*hei.z, data = df_lm)
summary(m1.z)
m1.z <- lm(b1~ssr.z*hei.z, data = df_lm)
variance = lm(abs(m1.z$residuals) ~ m1.z$fitted.values)$fitted.values^2
# calculating the weights
weights = 1 / variance
# weighted regression model
weighted_model = lm(b1 ~ ssr.z*hei.z, weights = weights, data=df_lm)
summary(weighted_model)
# Hypothesen überprüfen (Einfluss bestimmter Parameter auf OE/UE)
df_lm <- merge(slopes, df_clean, by.x="lID", by.y = "lID") %>%
select(-sID.y) %>%
rename(c("sID" = "sID.x")) %>%
mutate(
whr.z = scale(whr_mm),
ssr.z = scale(ssr),
hei.z = scale(hei_mm),
ssi.z = scale(ssi_mm),
b1.z = scale(b1),
ril.z = scale(ril),
hc.z = scale(hc)
)
# Hypothesen überprüfen (Einfluss bestimmter Parameter auf OE/UE)
df_lm <- merge(slopes, df_clean, by.x="lID", by.y = "lID") %>%
select(-sID.y) %>%
rename(c("sID" = "sID.x")) %>%
mutate(
whr.z = scale(whr_mm),
ssr.z = scale(ssr),
hei.z = scale(hei_mm),
ssi.z = scale(ssi_mm),
b1.z = scale(b1),
ril.z = scale(ril),
hc.z = scale(hac)
)
df_lm %>%
select(whr.z, ssr.z, hei.z, ssi.z. ril.z, hc.z) %>%
df_lm %>%
select(whr.z, ssr.z, hei.z, ssi.z, ril.z, hc.z) %>%
cor()
m1.z <- lm(b1~ssr.z*hei.z*hac.z, data = df_lm)
m1.z <- lm(b1~ssr.z*hei.z*hc.z, data = df_lm)
summary(m1.z)
m1.z <- lm(b1~ssr.z*hei.z, data = df_lm)
summary(m1.z)
m1.z <- lm(b1~ssr.z*hei.z*ril.z*whr.z*hc.z, data = df_lm)
summary(m1.z)
variance = lm(abs(m1.z$residuals) ~ m1.z$fitted.values)$fitted.values^2
# calculating the weights
weights = 1 / variance
# weighted regression model
weighted_model = lm(b1 ~ ssr.z*hei.z, weights = weights, data=df_lm)
summary(weighted_model)
# weighted regression model
weighted_model = lm(b1~ssr.z*hei.z*ril.z*whr.z*hc.z, data = df_lm)
summary(weighted_model)
m2.z <- lm(b1~ssr.z+hei.z+ril.z+whr.z+hc.z, data = df_lm)
summary(m2.z)
install.packages("geepack")
id <- as.data.frame(installed.packages()[,c(1,3:4)])
ID <- id[is.na(id$Priority)^, 1:2, drop=F]
ID <- id[is.na(id$Priority), 1:2, drop=F]
ID
